/**
 * 원시타입(number, string, boolean, symbol, null, undefined)의 경우는 변수에 할당 될 때
 * 메모리상에 값이 직접적으로 할당된다.
 * -------------------------------------------------------------------------------------------------------
 * 참조타입(object, array, function, Data, Set, Map 등)의 경우는 값이 메모리상에 모두 할당되는 것이 아닌
 * 메모리 공간에 값의 주소가 할당되어 참조하는 형태로 메모리에 할당된다.
 *
 * 참조타입은 단순하게 새로운 변수에 할당한다고 해서 온전히 독립적인 형태의 변수가 되지 않는다.
 * 이는 즉, 단순 변수할당으로 복사한 object의 특정 값을 변경한다고 가정했을 때
 * [ 복사 변수 ], [ origin 변수 ] 모두 동시에 변경된다.
 * -------------------------------------------------------------------------------------------------------
 * 깊은 복사는 메모리 자체에 값이 할당된 원시타입을 새로운 변수에 복사할 때 깊은 복사라고 한다.
 * 새로운 변수 메모리에 온전히 독립적인 값이 복사된다.
 * -------------------------------------------------------------------------------------------------------
 * 얕은 복사는 참조타입처럼 메모리공간의 주소를 참조하는 형태로 할당된 변수를 복사할 때, 해당 주소에 대한
 * 참조를 온전히 끊어내고 새로 복사된 독립적인 값을 참조하는 변수를 복사하여 만들 때 얕은 복사라고 한다.
 *
 * 얕은 복사를 하기 위한 방법론은 아래 컴포넌트 참조!
 * */

export const DeepCopy = () => {
    let obj = { str: 100, dex: 200, int: 1 }
    // 완전히 별도의 오브젝트를 만들기 위해서는 스프레드함수(...)을 사용할 수 있다.
    let copyObj = {...obj};

    obj.dex = 4444;
    obj.str = 4444;
    obj.int = 4444;

    copyObj.dex = 9999;

    console.log(copyObj)

    return (
        <div>
            DeepCopy
        </div>
    )
}